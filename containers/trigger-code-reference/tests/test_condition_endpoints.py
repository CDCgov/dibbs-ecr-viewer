import json
from pathlib import Path
from unittest.mock import patch

import pytest
from fastapi.testclient import TestClient

from app.main import app

client = TestClient(app)


@pytest.fixture
def mock_db():
    with patch("sqlite3.connect", autospec=True) as mock_connect:
        mock_conn = mock_connect.return_value
        mock_conn.__enter__.return_value = mock_conn
        mock_cursor = mock_conn.cursor.return_value
        yield mock_cursor


def _check_for_stamped_resource_in_bundle(
    stamped_message: dict, code: str, resource_type: str | None = None
) -> bool:
    """
    Testing utility that scans a provided input bundle for the first instance
    of a particular resource type, and checks whether that resource has an
    extension for a provided SNOMED code stamp. If a resource type is omitted,
    the utility checks all resources in the passed-in bundle for an extension
    stamp.

    :param bundle: The bundle generated by testing.
    :param code: The SNOMED code to check a stamp for.
    :param resource_type: Optionally, the resource type to check in the bundle.
      If omitted, all resources in the bundle are scanned for an extension.
    :return: Boolean indicating whether the first instance of the given resource
      type possesses a stamped extension of the provided code.
    """
    found_matching_extension = False
    for e in stamped_message.get("entry", []):
        if (
            resource_type is not None
            and e.get("resource").get("resourceType") != resource_type
        ):
            continue
        extensions = e.get("resource", {}).get("extension", [])
        for ext in extensions:
            if ext == {
                "url": "https://reportstream.cdc.gov/fhir/StructureDefinition/condition-code",
                "valueCoding": {"code": code, "system": "http://snomed.info/sct"},
            }:
                found_matching_extension = True
                break
    return found_matching_extension


def test_health_check():
    actual_response = client.get("/")
    assert actual_response.status_code == 200
    assert actual_response.json() == {
        "status": "OK",
    }


def test_get_value_sets_for_condition(mock_db):
    mocked_db_response = [
        ("dxtc", "A36.3|A36", "http://hl7.org/fhir/sid/icd-10-cm", "0363|0036"),
        ("sdtc", "772150003", "http://snomed.info/sct", None),
    ]
    mock_db.fetchall.return_value = mocked_db_response
    response = client.get("/get-value-sets?condition_code=276197005")
    expected_result = {
        "dxtc": [
            {"codes": ["A36.3", "A36"], "system": "http://hl7.org/fhir/sid/icd-10-cm"},
            {"codes": ["0363", "0036"], "system": "http://hl7.org/fhir/sid/icd-9-cm"},
        ],
        "sdtc": [{"codes": ["772150003"], "system": "http://snomed.info/sct"}],
    }
    assert response.json() == expected_result


# Note: This function is defined in utils, but we mock it in the namespace
# coming from main because that's where the endpoint is invoking it from
@patch("app.main.get_concepts_list")
def test_stamp_conditions_no_resources_to_stamp(patched_get_services_list):
    # We don't stamp patient resources, bundle should be a no-op
    message = json.load(open(Path(__file__).parent / "assets" / "sample_ecr.json"))
    message["entry"] = [
        e
        for e in message["entry"]
        if e.get("resource").get("resourceType") == "Patient"
    ]

    patched_get_services_list.return_value = [
        # dxtc = diagnostic trigger code
        # A36.3 = ICD-10-CM code for "Diphtheritic laryngitis"
        # A36 = ICD-10-CM code for "Diphtheria" (parent code)
        ("dxtc", "A36.3|A36", "http://hl7.org/fhir/sid/icd-10-cm"),
        # sdtc = snomed trigger code
        # 772150003 = SNOMED CT code for "Diphtheria caused by Corynebacterium diphtheriae (disorder)"
        ("sdtc", "772150003", "http://snomed.info/sct"),
    ]
    input = {
        "bundle": message,
        # 276197005 = SNOMED CT code for "Diphtheria contact (finding)"
        # This code represents exposure to or contact with someone who has Diphtheria
        "conditions": ["276197005"],
    }
    response = client.post("/stamp-condition-extensions", json=input)
    assert response.status_code == 200
    stamped_message = response.json()["extended_bundle"]
    found_matching_extension = _check_for_stamped_resource_in_bundle(
        stamped_message, "276197005"
    )
    assert not found_matching_extension


@patch("app.main.get_concepts_list")
def test_stamp_condition_extensions(patched_get_services_list):
    message = json.load(open(Path(__file__).parent / "assets" / "sample_ecr.json"))

    # mock the services list to match codes in our bundle
    patched_get_services_list.return_value = [
        # dxtc = diagnostic trigger code
        # 94310-0 = LOINC code for "SARS-like Coronavirus N gene [Presence] in Unspecified specimen by NAA with probe detection"
        ("dxtc", "94310-0", "http://loinc.org"),
        # sdtc = snomed trigger code
        # 840539006 = SNOMED CT code for "Disease caused by severe acute respiratory syndrome coronavirus 2 (disorder)"
        ("sdtc", "840539006", "http://snomed.info/sct"),
    ]

    # The covid-19 SNOMED code
    input = {
        "bundle": message,
        "conditions": ["840539006"],
    }

    response = client.post("/stamp-condition-extensions", json=input)
    assert response.status_code == 200
    stamped_message = response.json()["extended_bundle"]

    found_matching_extension = _check_for_stamped_resource_in_bundle(
        stamped_message, "840539006", "Observation"
    )
    assert found_matching_extension


@patch("app.main.get_concepts_list")
def test_stamp_condition_extensions_with_no_conditions(patched_get_services_list):
    """Test that when no conditions are provided, no stamping occurs"""
    message = json.load(open(Path(__file__).parent / "assets" / "sample_ecr.json"))

    patched_get_services_list.return_value = [
        ("dxtc", "94310-0", "http://loinc.org"),
        ("sdtc", "840539006", "http://snomed.info/sct"),
    ]

    input = {"bundle": message}

    response = client.post("/stamp-condition-extensions", json=input)
    assert response.status_code == 200
    stamped_message = response.json()["extended_bundle"]

    # Check for a different SNOMED code that isn't in the bundle
    found_matching_extension = _check_for_stamped_resource_in_bundle(
        stamped_message,
        "276197005",
        "Observation",  # Different SNOMED code
    )
    assert not found_matching_extension
